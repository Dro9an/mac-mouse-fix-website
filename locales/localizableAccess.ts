/*
This file provides convenience methods for accessing the autogenerated Localizable.js data from our vue components.

The main way to access Localizable.js is through the vuei18n framework. E.g. it lets you access translations with $t() or lets you access a list of locales with $i18n.locales.
However we store some extra, custom data in Localizable.js which we make easy-to-access with this module.
*/

export { localeInfo, sourceLocale, progressDisplay, localeHasTranslations };

import Localizable from "./Localizable";

function localeHasTranslations(locale: string): boolean {
  const progress = progressDisplay(locale);
  return progress != "0%";
}

function progressDisplay(locale: string): string {
  // Handle isSourceLocale
  //  Note: Source language is 100% translated by definition.
  if (locale == sourceLocale()) {
    return "100%";
  }

  // Get info
  var info = localeInfo(locale);

  // Guard noInfo
  if (info == null) {
    console.assert(false);
    return "0%";
  }

  // Get result
  var result = info!.progressDisplay; // I think It would probably be cleaner if `info` gave us a float instead of a string like `%87`

  // Guard invalid result;
  if (result == null || !result.includes("%")) {
    console.assert(false);
    return "0%";
  }

  // Return
  return result;
}

function sourceLocale(): string {
  return Localizable["sourceLocale"];
}

function localeInfo(locale: string) {
  var result = null;

  for (var localeInfo of Localizable["locales"]) {
    if (localeInfo["code"] == locale) {
      result = localeInfo;
      break;
    }
  }

  return result;
}
